"use strict";

var _portalnode = _interopRequireDefault(require("../portalnode"));

var _blockchain = require("blockchain-ts/lib/blockchain/blockchain");

var _interface = require("blockchain-ts/lib/blockchain/interface");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var responce = {};

var reader = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout
});

var node;
reader.on("line", function (data) {
  return line(data);
});

function line(data) {
  var rpc = data.toString().split(" ")[0];
  var req = data.toString().split(" ")[1];

  if (Object.keys(responce).includes(rpc)) {
    responce[rpc](req);
  }
}

responce.connect = function (req) {
  console.log("connect to network");
  var body = req.split(",");
  node = new _portalnode.default(body[0], {
    address: body[1],
    port: body[2]
  });
};

responce.mining = function () {
  node.mine();
};

responce.makeTransaction = function (req) {
  var body = req.split(","); //recipient, amount, data

  var data = {
    type: _interface.ETransactionType.transaction,
    payload: body[2]
  };
  node.transaction(body[0], parseInt(body[1]), data);
};

responce.balance = function () {
  console.log("now balance", node.blockchain.nowAmount());
};

responce.chain = function () {
  if ((0, _blockchain.validChain)(node.blockchain.chain)) console.log("now blockchain", node.blockchain.chain);else console.log("chain error");
};

responce.address = function () {
  console.log("my address", node.blockchain.address);
};

responce.kad = function () {
  console.log(node.kad.f.getAllPeerIds());
};

responce.help = function () {
  console.log(Object.keys(responce));
};

console.log(Object.keys(responce));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvcG9ydGFsbm9kZS50cyJdLCJuYW1lcyI6WyJyZXNwb25jZSIsInJlYWRlciIsInJlcXVpcmUiLCJjcmVhdGVJbnRlcmZhY2UiLCJpbnB1dCIsInByb2Nlc3MiLCJzdGRpbiIsIm91dHB1dCIsInN0ZG91dCIsIm5vZGUiLCJvbiIsImRhdGEiLCJsaW5lIiwicnBjIiwidG9TdHJpbmciLCJzcGxpdCIsInJlcSIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsImNvbm5lY3QiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsIkNvbm5lY3RQb3RhbG5vZGUiLCJhZGRyZXNzIiwicG9ydCIsIm1pbmluZyIsIm1pbmUiLCJtYWtlVHJhbnNhY3Rpb24iLCJ0eXBlIiwiRVRyYW5zYWN0aW9uVHlwZSIsInRyYW5zYWN0aW9uIiwicGF5bG9hZCIsInBhcnNlSW50IiwiYmFsYW5jZSIsImJsb2NrY2hhaW4iLCJub3dBbW91bnQiLCJjaGFpbiIsImthZCIsImYiLCJnZXRBbGxQZWVySWRzIiwiaGVscCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFJQTs7OztBQUVBLElBQU1BLFFBQWdDLEdBQUcsRUFBekM7O0FBQ0EsSUFBTUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFQLENBQW9CQyxlQUFwQixDQUFvQztBQUNqREMsRUFBQUEsS0FBSyxFQUFFQyxPQUFPLENBQUNDLEtBRGtDO0FBRWpEQyxFQUFBQSxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0c7QUFGaUMsQ0FBcEMsQ0FBZjs7QUFLQSxJQUFJQyxJQUFKO0FBRUFSLE1BQU0sQ0FBQ1MsRUFBUCxDQUFVLE1BQVYsRUFBa0IsVUFBQ0MsSUFBRDtBQUFBLFNBQWVDLElBQUksQ0FBQ0QsSUFBRCxDQUFuQjtBQUFBLENBQWxCOztBQUVBLFNBQVNDLElBQVQsQ0FBY0QsSUFBZCxFQUF5QjtBQUN2QixNQUFNRSxHQUFHLEdBQUdGLElBQUksQ0FBQ0csUUFBTCxHQUFnQkMsS0FBaEIsQ0FBc0Is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bm9kZVwiO1xuaW1wb3J0IHtcbiAgSVRyYW5zYWN0aW9uRGF0YSxcbiAgdmFsaWRDaGFpblxufSBmcm9tIFwiYmxvY2tjaGFpbi10cy9saWIvYmxvY2tjaGFpbi9ibG9ja2NoYWluXCI7XG5pbXBvcnQgeyBFVHJhbnNhY3Rpb25UeXBlIH0gZnJvbSBcImJsb2NrY2hhaW4tdHMvbGliL2Jsb2NrY2hhaW4vaW50ZXJmYWNlXCI7XG5cbmNvbnN0IHJlc3BvbmNlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG5jb25zdCByZWFkZXIgPSByZXF1aXJlKFwicmVhZGxpbmVcIikuY3JlYXRlSW50ZXJmYWNlKHtcbiAgaW5wdXQ6IHByb2Nlc3Muc3RkaW4sXG4gIG91dHB1dDogcHJvY2Vzcy5zdGRvdXRcbn0pO1xuXG5sZXQgbm9kZTogQ29ubmVjdFBvdGFsbm9kZTtcblxucmVhZGVyLm9uKFwibGluZVwiLCAoZGF0YTogYW55KSA9PiBsaW5lKGRhdGEpKTtcblxuZnVuY3Rpb24gbGluZShkYXRhOiBhbnkpIHtcbiAgY29uc3QgcnBjID0gZGF0YS50b1N0cmluZygpLnNwbGl0KFwiIFwiKVswXTtcbiAgY29uc3QgcmVxID0gZGF0YS50b1N0cmluZygpLnNwbGl0KFwiIFwiKVsxXTtcblxuICBpZiAoT2JqZWN0LmtleXMocmVzcG9uY2UpLmluY2x1ZGVzKHJwYykpIHtcbiAgICByZXNwb25jZVtycGNdKHJlcSk7XG4gIH1cbn1cblxucmVzcG9uY2UuY29ubmVjdCA9IChyZXE6IGFueSkgPT4ge1xuICBjb25zb2xlLmxvZyhcImNvbm5lY3QgdG8gbmV0d29ya1wiKTtcbiAgY29uc3QgYm9keSA9IHJlcS5zcGxpdChcIixcIik7XG4gIG5vZGUgPSBuZXcgQ29ubmVjdFBvdGFsbm9kZShib2R5WzBdLCB7IGFkZHJlc3M6IGJvZHlbMV0sIHBvcnQ6IGJvZHlbMl0gfSk7XG59O1xuXG5yZXNwb25jZS5taW5pbmcgPSAoKSA9PiB7XG4gIG5vZGUubWluZSgpO1xufTtcblxucmVzcG9uY2UubWFrZVRyYW5zYWN0aW9uID0gKHJlcTogYW55KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSByZXEuc3BsaXQoXCIsXCIpO1xuICAvL3JlY2lwaWVudCwgYW1vdW50LCBkYXRhXG4gIGNvbnN0IGRhdGE6IElUcmFuc2FjdGlvbkRhdGEgPSB7XG4gICAgdHlwZTogRVRyYW5zYWN0aW9uVHlwZS50cmFuc2FjdGlvbixcbiAgICBwYXlsb2FkOiBib2R5WzJdXG4gIH07XG4gIG5vZGUudHJhbnNhY3Rpb24oYm9keVswXSwgcGFyc2VJbnQoYm9keVsxXSksIGRhdGEpO1xufTtcblxucmVzcG9uY2UuYmFsYW5jZSA9ICgpID0+IHtcbiAgY29uc29sZS5sb2coXCJub3cgYmFsYW5jZVwiLCBub2RlLmJsb2NrY2hhaW4ubm93QW1vdW50KCkpO1xufTtcblxucmVzcG9uY2UuY2hhaW4gPSAoKSA9PiB7XG4gIGlmICh2YWxpZENoYWluKG5vZGUuYmxvY2tjaGFpbi5jaGFpbikpXG4gICAgY29uc29sZS5sb2coXCJub3cgYmxvY2tjaGFpblwiLCBub2RlLmJsb2NrY2hhaW4uY2hhaW4pO1xuICBlbHNlIGNvbnNvbGUubG9nKFwiY2hhaW4gZXJyb3JcIik7XG59O1xuXG5yZXNwb25jZS5hZGRyZXNzID0gKCkgPT4ge1xuICBjb25zb2xlLmxvZyhcIm15IGFkZHJlc3NcIiwgbm9kZS5ibG9ja2NoYWluLmFkZHJlc3MpO1xufTtcblxucmVzcG9uY2Uua2FkID0gKCkgPT4ge1xuICBjb25zb2xlLmxvZyhub2RlLmthZC5mLmdldEFsbFBlZXJJZHMoKSk7XG59O1xuXG5yZXNwb25jZS5oZWxwID0gKCkgPT4ge1xuICBjb25zb2xlLmxvZyhPYmplY3Qua2V5cyhyZXNwb25jZSkpO1xufTtcblxuY29uc29sZS5sb2coT2JqZWN0LmtleXMocmVzcG9uY2UpKTtcbiJdfQ==